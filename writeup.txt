1. The key difference between a hash function and a hash-based message authentication code (HMAC) is that an HMAC uses a secret internal key to create the hash, whereas a hash function's key/state may be known (the hash of the previous message) and can be set.  Without the key it is currently believed that one can do no better than guessing, as one would have to do to defeat a pseudorandom function, what the valid hash of a message would be.  Therefore because someone cannot create a valid HMAC hash without knowing the secret key, they cannot conduct a length extension attack if the design in section 1.2 were changed to use an HMAC

2. If the MD5 hash collision technique from section 2.2 were applied to fooling a digital signature verification system, a developer could sneak malicious code in under a harmless program's signature.  Let's say I worked at a company called AAA.  AAA releases some program that I developed.  The normal operation of the program is not harmful to the computer, but if "blob" (as in section 2.2) has a specific value then the program has malicious implications.  AAA's release of the program is approved and the digital signature is marked as allowed for installation and execution.  I can then release another version of the program with the value of "blob" that changes the program's execution to be malicious, but the digital signature (MD5 hash of the program) matches that of AAA's program.  Thus, my malicious program is allowed to be installed & execute because its signature collides with the approved signature of AAA's program.
